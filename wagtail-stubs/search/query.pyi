from typing import Any

class SearchQuery:
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __invert__(self): ...

class PlainText(SearchQuery):
    OPERATORS: Any = ...
    DEFAULT_OPERATOR: str = ...
    query_string: Any = ...
    operator: Any = ...
    boost: Any = ...
    def __init__(self, query_string: str, operator: str=..., boost: float=...) -> None: ...

class Phrase(SearchQuery):
    query_string: Any = ...
    def __init__(self, query_string: str) -> None: ...

class MatchAll(SearchQuery): ...

class Boost(SearchQuery):
    subquery: Any = ...
    boost: Any = ...
    def __init__(self, subquery: SearchQuery, boost: float) -> None: ...

class And(SearchQuery):
    subqueries: Any = ...
    def __init__(self, subqueries: Any) -> None: ...

class Or(SearchQuery):
    subqueries: Any = ...
    def __init__(self, subqueries: Any) -> None: ...

class Not(SearchQuery):
    subquery: Any = ...
    def __init__(self, subquery: SearchQuery) -> None: ...

MATCH_ALL: Any
MATCH_NONE: Any
