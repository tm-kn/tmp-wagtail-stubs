from typing import Any, Optional
from wagtail.search.backends import get_search_backends_with_name as get_search_backends_with_name

logger: Any

class Indexed:
    @classmethod
    def indexed_get_parent(cls, require_model: bool = ...): ...
    @classmethod
    def indexed_get_content_type(cls): ...
    @classmethod
    def indexed_get_toplevel_content_type(cls): ...
    @classmethod
    def get_search_fields(cls): ...
    @classmethod
    def get_searchable_search_fields(cls): ...
    @classmethod
    def get_autocomplete_search_fields(cls): ...
    @classmethod
    def get_filterable_search_fields(cls): ...
    @classmethod
    def get_indexed_objects(cls): ...
    def get_indexed_instance(self): ...
    @classmethod
    def check(cls, **kwargs: Any): ...
    search_fields: Any = ...

def get_indexed_models(): ...
def class_is_indexed(cls): ...
def get_indexed_instance(instance: Any, check_exists: bool = ...): ...
def insert_or_update_object(instance: Any) -> None: ...
def remove_object(instance: Any) -> None: ...

class BaseField:
    field_name: Any = ...
    kwargs: Any = ...
    def __init__(self, field_name: Any, **kwargs: Any) -> None: ...
    def get_field(self, cls: Any): ...
    def get_attname(self, cls: Any): ...
    def get_definition_model(self, cls: Any): ...
    def get_type(self, cls: Any): ...
    def get_value(self, obj: Any): ...

class SearchField(BaseField):
    boost: Any = ...
    partial_match: Any = ...
    def __init__(self, field_name: Any, boost: Optional[Any] = ..., partial_match: bool = ..., **kwargs: Any) -> None: ...

class AutocompleteField(BaseField): ...
class FilterField(BaseField): ...

class RelatedFields:
    field_name: Any = ...
    fields: Any = ...
    def __init__(self, field_name: Any, fields: Any) -> None: ...
    def get_field(self, cls: Any): ...
    def get_definition_model(self, cls: Any): ...
    def get_value(self, obj: Any): ...
    def select_on_queryset(self, queryset: Any): ...
