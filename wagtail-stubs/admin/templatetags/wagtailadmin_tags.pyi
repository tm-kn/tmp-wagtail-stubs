from django import template
from django.db.models import QuerySet
from typing import Any, Optional
from wagtail.admin.localization import get_js_translation_strings as get_js_translation_strings
from wagtail.admin.menu import admin_menu as admin_menu
from wagtail.admin.navigation import get_explorable_root_page as get_explorable_root_page
from wagtail.admin.search import admin_search_areas as admin_search_areas
from wagtail.core import hooks as hooks
from wagtail.core.models import Collection as Collection, CollectionViewRestriction as CollectionViewRestriction, Locale as Locale, Page as Page, PageLogEntry as PageLogEntry, PageViewRestriction as PageViewRestriction, UserPagePermissionsProxy as UserPagePermissionsProxy
from wagtail.core.utils import accepts_kwarg as accepts_kwarg, camelcase_to_underscore as camelcase_to_underscore, escape_script as escape_script
from wagtail.users.utils import get_gravatar_url as get_gravatar_url
from wagtail.utils.deprecation import RemovedInWagtail212Warning as RemovedInWagtail212Warning

register: Any

def menu_search(context: Any): ...
def main_nav(context: Any): ...
def explorer_breadcrumb(context: Any, page: Any, include_self: bool = ...): ...
def search_other(context: Any, current: Optional[Any] = ...): ...
def main_nav_js(): ...
def ellipsistrim(value: Any, max_length: Any): ...
def fieldtype(bound_field: Any): ...
def widgettype(bound_field: Any): ...
def page_permissions(context: Any, page: Any): ...
def test_collection_is_public(context: Any, collection: Any): ...
def test_page_is_public(context: Any, page: Any): ...
def hook_output(hook_name: Any): ...
def usage_count_enabled(): ...
def base_url_setting(): ...
def allow_unicode_slugs(): ...
def auto_update_preview(): ...

class EscapeScriptNode(template.Node):
    TAG_NAME: str = ...
    nodelist: Any = ...
    def __init__(self, nodelist: Any) -> None: ...
    def render(self, context: Any): ...
    @classmethod
    def handle(cls, parser: Any, token: Any): ...

def render_with_errors(bound_field: Any): ...
def has_unrendered_errors(bound_field: Any): ...
def cautious_slugify(value: Any): ...
def querystring(context: Any, **kwargs: Any): ...
def page_table_header_label(context: Any, label: Optional[Any] = ..., parent_page_title: Optional[Any] = ..., **kwargs: Any): ...
def table_header_label(context: Any, label: Optional[Any] = ..., sortable: bool = ..., ordering: Optional[Any] = ..., sort_context_var: str = ..., sort_param: str = ..., sort_field: Optional[Any] = ..., ascending_title_text: Optional[Any] = ..., descending_title_text: Optional[Any] = ...): ...
def pagination_querystring(context: Any, page_number: Any, page_key: str = ...): ...
def paginate(context: Any, page: Any, base_url: str = ..., page_key: str = ..., classnames: str = ...): ...
def page_listing_buttons(context: Any, page: Any, page_perms: Any, is_parent: bool = ...): ...
def message_tags(message: Any): ...
def admin_urlquote(value: Any): ...
def avatar_url(user: Any, size: int = ...): ...
def js_translation_strings(): ...
def notification_static(path: Any): ...
def versioned_static(path: Any): ...
def icon(name: Optional[Any] = ..., class_name: str = ..., title: Optional[Any] = ..., wrapped: bool = ...): ...
def timesince_simple(d: Any): ...
def timesince_last_update(last_update: Any, time_prefix: str = ..., use_shorthand: bool = ...): ...
def format_action_log_message(log_entry: Any): ...
def format_collection(coll: Collection, min_depth: int=...) -> str: ...
def minimum_collection_depth(collections: QuerySet) -> int: ...
def user_display_name(user: Any): ...
def i18n_enabled(): ...
def locales(): ...
