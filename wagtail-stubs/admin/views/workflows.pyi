from typing import Any, Optional
from wagtail.admin import messages as messages
from wagtail.admin.auth import PermissionPolicyChecker as PermissionPolicyChecker
from wagtail.admin.forms.workflows import TaskChooserSearchForm as TaskChooserSearchForm, WorkflowPagesFormSet as WorkflowPagesFormSet, get_task_form_class as get_task_form_class, get_workflow_edit_handler as get_workflow_edit_handler
from wagtail.admin.modal_workflow import render_modal_workflow as render_modal_workflow
from wagtail.admin.views.generic import CreateView as CreateView, DeleteView as DeleteView, EditView as EditView, IndexView as IndexView
from wagtail.core.models import Page as Page, Task as Task, TaskState as TaskState, UserPagePermissionsProxy as UserPagePermissionsProxy, Workflow as Workflow, WorkflowState as WorkflowState
from wagtail.core.permissions import task_permission_policy as task_permission_policy, workflow_permission_policy as workflow_permission_policy
from wagtail.core.utils import resolve_model_string as resolve_model_string
from wagtail.core.workflows import get_task_types as get_task_types

task_permission_checker: Any

class Index(IndexView):
    permission_policy: Any = ...
    model: Any = ...
    context_object_name: str = ...
    template_name: str = ...
    add_url_name: str = ...
    edit_url_name: str = ...
    page_title: Any = ...
    add_item_label: Any = ...
    header_icon: str = ...
    def show_disabled(self): ...
    def get_queryset(self): ...
    def get_context_data(self, **kwargs: Any): ...

class Create(CreateView):
    permission_policy: Any = ...
    model: Any = ...
    page_title: Any = ...
    template_name: str = ...
    success_message: Any = ...
    add_url_name: str = ...
    edit_url_name: str = ...
    index_url_name: str = ...
    header_icon: str = ...
    edit_handler: Any = ...
    def get_edit_handler(self): ...
    def get_form_class(self): ...
    def get_form(self, form_class: Optional[Any] = ...): ...
    def get_pages_formset(self): ...
    def get_context_data(self, **kwargs: Any): ...
    form: Any = ...
    object: Any = ...
    def form_valid(self, form: Any): ...

class Edit(EditView):
    permission_policy: Any = ...
    model: Any = ...
    page_title: Any = ...
    template_name: str = ...
    success_message: Any = ...
    add_url_name: str = ...
    edit_url_name: str = ...
    delete_url_name: str = ...
    delete_item_label: Any = ...
    index_url_name: str = ...
    enable_item_label: Any = ...
    enable_url_name: str = ...
    header_icon: str = ...
    edit_handler: Any = ...
    MAX_PAGES: int = ...
    def get_edit_handler(self): ...
    def get_form_class(self): ...
    def get_form(self, form_class: Optional[Any] = ...): ...
    def get_pages_formset(self): ...
    def get_paginated_pages(self): ...
    def get_context_data(self, **kwargs: Any): ...
    @property
    def get_enable_url(self): ...
    form: Any = ...
    object: Any = ...
    def form_valid(self, form: Any): ...

class Disable(DeleteView):
    permission_policy: Any = ...
    model: Any = ...
    page_title: Any = ...
    template_name: str = ...
    success_message: Any = ...
    add_url_name: str = ...
    edit_url_name: str = ...
    delete_url_name: str = ...
    index_url_name: str = ...
    header_icon: str = ...
    @property
    def get_edit_url(self): ...
    def get_context_data(self, **kwargs: Any): ...
    object: Any = ...
    def delete(self, request: Any, *args: Any, **kwargs: Any): ...

def usage(request: Any, pk: Any): ...
def enable_workflow(request: Any, pk: Any): ...
def remove_workflow(request: Any, page_pk: Any, workflow_pk: Optional[Any] = ...): ...

class TaskIndex(IndexView):
    permission_policy: Any = ...
    model: Any = ...
    context_object_name: str = ...
    template_name: str = ...
    add_url_name: str = ...
    edit_url_name: str = ...
    page_title: Any = ...
    add_item_label: Any = ...
    header_icon: str = ...
    def show_disabled(self): ...
    def get_queryset(self): ...
    def get_context_data(self, **kwargs: Any): ...

def select_task_type(request: Any): ...

class CreateTask(CreateView):
    permission_policy: Any = ...
    model: Any = ...
    page_title: Any = ...
    template_name: str = ...
    success_message: Any = ...
    add_url_name: str = ...
    edit_url_name: str = ...
    index_url_name: str = ...
    header_icon: str = ...
    def model(self): ...
    def get_form_class(self): ...
    def get_add_url(self): ...

class EditTask(EditView):
    permission_policy: Any = ...
    model: Any = ...
    page_title: Any = ...
    template_name: str = ...
    success_message: Any = ...
    add_url_name: str = ...
    edit_url_name: str = ...
    delete_url_name: str = ...
    index_url_name: str = ...
    delete_item_label: Any = ...
    enable_item_label: Any = ...
    enable_url_name: str = ...
    header_icon: str = ...
    def model(self): ...
    def page_title(self): ...
    def get_queryset(self): ...
    def get_object(self, queryset: Optional[Any] = ...): ...
    def get_form_class(self): ...
    def get_context_data(self, **kwargs: Any): ...
    @property
    def get_enable_url(self): ...

class DisableTask(DeleteView):
    permission_policy: Any = ...
    model: Any = ...
    page_title: Any = ...
    template_name: str = ...
    success_message: Any = ...
    add_url_name: str = ...
    edit_url_name: str = ...
    delete_url_name: str = ...
    index_url_name: str = ...
    header_icon: str = ...
    def get_context_data(self, **kwargs: Any): ...
    @property
    def get_edit_url(self): ...
    object: Any = ...
    def delete(self, request: Any, *args: Any, **kwargs: Any): ...

def enable_task(request: Any, pk: Any): ...
def get_chooser_context(): ...
def get_task_result_data(task: Any): ...
def task_chooser(request: Any): ...
def task_chosen(request: Any, task_id: Any): ...
