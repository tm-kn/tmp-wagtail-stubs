from typing import Any, Optional
from wagtail.core.models import Page as Page
from wagtail.core.rich_text.rewriters import EmbedRewriter as EmbedRewriter, LinkRewriter as LinkRewriter, MultiRuleRewriter as MultiRuleRewriter
from wagtail.core.whitelist import Whitelister as Whitelister, allow_without_attributes as allow_without_attributes

class WhitelistRule:
    element: Any = ...
    handler: Any = ...
    def __init__(self, element: Any, handler: Any) -> None: ...

class EmbedTypeRule:
    embed_type: Any = ...
    handler: Any = ...
    def __init__(self, embed_type: Any, handler: Any) -> None: ...

class LinkTypeRule:
    link_type: Any = ...
    handler: Any = ...
    def __init__(self, link_type: Any, handler: Any) -> None: ...

BASE_WHITELIST_RULES: Any

class DbWhitelister(Whitelister):
    converter_rules: Any = ...
    element_rules: Any = ...
    def __init__(self, converter_rules: Any) -> None: ...
    def embed_handlers(self): ...
    def link_handlers(self): ...
    def clean_tag_node(self, doc: Any, tag: Any) -> None: ...

class EditorHTMLConverter:
    converter_rules: Any = ...
    def __init__(self, features: Optional[Any] = ...) -> None: ...
    def whitelister(self): ...
    def to_database_format(self, html: Any): ...
    def html_rewriter(self): ...
    def from_database_format(self, html: Any): ...

class PageLinkHandler:
    @staticmethod
    def get_db_attributes(tag: Any): ...
    @staticmethod
    def expand_db_attributes(attrs: Any): ...
