from html.parser import HTMLParser
from typing import Any
from wagtail.admin.rich_text.converters.contentstate_models import Block as Block, ContentState as ContentState, Entity as Entity, EntityRange as EntityRange, InlineStyleRange as InlineStyleRange
from wagtail.admin.rich_text.converters.html_ruleset import HTMLRuleset as HTMLRuleset
from wagtail.core.models import Page as Page

STRIP_WHITESPACE: int
KEEP_WHITESPACE: int
FORCE_WHITESPACE: int
WHITESPACE_RE: Any

class HandlerState:
    current_block: Any = ...
    current_inline_styles: Any = ...
    current_entity_ranges: Any = ...
    leading_whitespace: Any = ...
    list_depth: int = ...
    list_item_type: Any = ...
    has_preceding_nonatomic_block: bool = ...
    pushed_states: Any = ...
    def __init__(self) -> None: ...
    def push(self) -> None: ...
    def pop(self) -> None: ...

def add_paragraph_block(state: Any, contentstate: Any) -> None: ...

class ListElementHandler:
    list_item_type: Any = ...
    def __init__(self, list_item_type: Any) -> None: ...
    def handle_starttag(self, name: Any, attrs: Any, state: Any, contentstate: Any) -> None: ...
    def handle_endtag(self, name: Any, state: Any, contentstate: Any) -> None: ...

class BlockElementHandler:
    block_type: Any = ...
    def __init__(self, block_type: Any) -> None: ...
    def create_block(self, name: Any, attrs: Any, state: Any, contentstate: Any): ...
    def handle_starttag(self, name: Any, attrs: Any, state: Any, contentstate: Any) -> None: ...
    def handle_endtag(self, name: Any, state: Any, contentState: Any) -> None: ...

class ListItemElementHandler(BlockElementHandler):
    def __init__(self) -> None: ...
    def create_block(self, name: Any, attrs: Any, state: Any, contentstate: Any): ...

class InlineStyleElementHandler:
    style: Any = ...
    def __init__(self, style: Any) -> None: ...
    def handle_starttag(self, name: Any, attrs: Any, state: Any, contentstate: Any) -> None: ...
    def handle_endtag(self, name: Any, state: Any, contentstate: Any) -> None: ...

class InlineEntityElementHandler:
    entity_type: Any = ...
    def __init__(self, entity_type: Any) -> None: ...
    def handle_starttag(self, name: Any, attrs: Any, state: Any, contentstate: Any) -> None: ...
    def get_attribute_data(self, attrs: Any): ...
    def handle_endtag(self, name: Any, state: Any, contentstate: Any) -> None: ...

class LinkElementHandler(InlineEntityElementHandler):
    mutability: str = ...

class ExternalLinkElementHandler(LinkElementHandler):
    def get_attribute_data(self, attrs: Any): ...

class PageLinkElementHandler(LinkElementHandler):
    def get_attribute_data(self, attrs: Any): ...

class AtomicBlockEntityElementHandler:
    def handle_starttag(self, name: Any, attrs: Any, state: Any, contentstate: Any) -> None: ...
    def handle_endtag(self, name: Any, state: Any, contentstate: Any) -> None: ...

class HorizontalRuleHandler(AtomicBlockEntityElementHandler):
    def create_entity(self, name: Any, attrs: Any, state: Any, contentstate: Any): ...

class LineBreakHandler:
    def handle_starttag(self, name: Any, attrs: Any, state: Any, contentstate: Any) -> None: ...
    def handle_endtag(self, name: Any, state: Any, contentstate: Any) -> None: ...

class HtmlToContentStateHandler(HTMLParser):
    paragraph_handler: Any = ...
    element_handlers: Any = ...
    def __init__(self, features: Any = ...) -> None: ...
    state: Any = ...
    contentstate: Any = ...
    open_elements: Any = ...
    def reset(self) -> None: ...
    def handle_starttag(self, name: Any, attrs: Any) -> None: ...
    def handle_endtag(self, name: Any) -> None: ...
    def handle_data(self, content: Any) -> None: ...
    def close(self) -> None: ...
