from django.forms import widgets
from typing import Any
from wagtail.admin.edit_handlers import RichTextFieldPanel as RichTextFieldPanel
from wagtail.admin.rich_text.converters.editor_html import EditorHTMLConverter as EditorHTMLConverter
from wagtail.admin.staticfiles import versioned_static as versioned_static
from wagtail.core.rich_text import features as features

class HalloPlugin:
    name: Any = ...
    options: Any = ...
    js: Any = ...
    css: Any = ...
    order: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def construct_plugins_list(self, plugins: Any) -> None: ...
    @property
    def media(self): ...

class HalloFormatPlugin(HalloPlugin):
    format_name: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def construct_plugins_list(self, plugins: Any) -> None: ...

class HalloHeadingPlugin(HalloPlugin):
    default_order: int = ...
    element: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def construct_plugins_list(self, plugins: Any) -> None: ...

class HalloListPlugin(HalloPlugin):
    list_type: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def construct_plugins_list(self, plugins: Any) -> None: ...

class HalloRequireParagraphsPlugin(HalloPlugin):
    @property
    def media(self): ...

CORE_HALLO_PLUGINS: Any

class HalloRichTextArea(widgets.Textarea):
    template_name: str = ...
    accepts_features: bool = ...
    def get_panel(self): ...
    options: Any = ...
    features: Any = ...
    converter: Any = ...
    plugins: Any = ...
    def __init__(self, *args: Any, **kwargs: Any): ...
    def format_value(self, value: Any): ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def media(self): ...
