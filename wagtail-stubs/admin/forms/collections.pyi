from .view_restrictions import BaseViewRestrictionForm as BaseViewRestrictionForm
from django import forms
from typing import Any, Optional
from wagtail.core.models import Collection as Collection, CollectionViewRestriction as CollectionViewRestriction, GroupCollectionPermission as GroupCollectionPermission

class CollectionViewRestrictionForm(BaseViewRestrictionForm):
    class Meta:
        model: Any = ...
        fields: Any = ...

class SelectWithDisabledOptions(forms.Select):
    disabled_values: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def create_option(self, name: Any, value: Any, *args: Any, **kwargs: Any): ...

class CollectionChoiceField(forms.ModelChoiceField):
    widget: Any = ...
    disabled_queryset: Any = ...
    def __init__(self, *args: Any, disabled_queryset: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def label_from_instance(self, obj: Any): ...

class CollectionForm(forms.ModelForm):
    parent: Any = ...
    class Meta:
        model: Any = ...
        fields: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class BaseCollectionMemberForm(forms.ModelForm):
    collections: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def save(self, commit: bool = ...): ...

class BaseGroupCollectionMemberPermissionFormSet(forms.BaseFormSet):
    instance: Any = ...
    def __init__(self, data: Optional[Any] = ..., files: Optional[Any] = ..., instance: Optional[Any] = ..., prefix: Optional[Any] = ...): ...
    @property
    def empty_form(self): ...
    def clean(self) -> None: ...
    def save(self) -> None: ...
    def as_admin_panel(self): ...

def collection_member_permission_formset_factory(model: Any, permission_types: Any, template: Any, default_prefix: Optional[Any] = ...): ...
