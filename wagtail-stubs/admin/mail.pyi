from typing import Any, Optional
from wagtail.admin.auth import users_with_page_permission as users_with_page_permission
from wagtail.core.models import GroupApprovalTask as GroupApprovalTask, PageRevision as PageRevision, TaskState as TaskState, WorkflowState as WorkflowState
from wagtail.core.utils import camelcase_to_underscore as camelcase_to_underscore
from wagtail.users.models import UserProfile as UserProfile

logger: Any

class OpenedConnection:
    connection: Any = ...
    def __init__(self, connection: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any): ...

def send_mail(subject: Any, message: Any, recipient_list: Any, from_email: Optional[Any] = ..., **kwargs: Any): ...
def send_notification(page_revision_id: Any, notification: Any, excluded_user_id: Any): ...

class Notifier:
    notification: str = ...
    template_directory: str = ...
    valid_classes: Any = ...
    def __init__(self, valid_classes: Any) -> None: ...
    def can_handle(self, instance: Any, **kwargs: Any): ...
    def get_valid_recipients(self, instance: Any, **kwargs: Any): ...
    def get_template_base_prefix(self, instance: Any, **kwargs: Any): ...
    def get_context(self, instance: Any, **kwargs: Any): ...
    def get_template_set(self, instance: Any, **kwargs: Any): ...
    def send_notifications(self, template_set: Any, context: Any, recipients: Any, **kwargs: Any) -> None: ...
    def __call__(self, instance: Optional[Any] = ..., **kwargs: Any): ...

class EmailNotificationMixin:
    def get_recipient_users(self, instance: Any, **kwargs: Any): ...
    def get_valid_recipients(self, instance: Any, **kwargs: Any): ...
    def get_template_set(self, instance: Any, **kwargs: Any): ...
    def send_emails(self, template_set: Any, context: Any, recipients: Any, **kwargs: Any): ...
    def send_notifications(self, template_set: Any, context: Any, recipients: Any, **kwargs: Any): ...

class BaseWorkflowStateEmailNotifier(EmailNotificationMixin, Notifier):
    def __init__(self) -> None: ...
    def get_context(self, workflow_state: Any, **kwargs: Any): ...

class WorkflowStateApprovalEmailNotifier(BaseWorkflowStateEmailNotifier):
    notification: str = ...
    def get_recipient_users(self, workflow_state: Any, **kwargs: Any): ...

class WorkflowStateRejectionEmailNotifier(BaseWorkflowStateEmailNotifier):
    notification: str = ...
    def get_recipient_users(self, workflow_state: Any, **kwargs: Any): ...
    def get_context(self, workflow_state: Any, **kwargs: Any): ...

class WorkflowStateSubmissionEmailNotifier(BaseWorkflowStateEmailNotifier):
    notification: str = ...
    def get_recipient_users(self, workflow_state: Any, **kwargs: Any): ...

class BaseGroupApprovalTaskStateEmailNotifier(EmailNotificationMixin, Notifier):
    def __init__(self) -> None: ...
    def can_handle(self, instance: Any, **kwargs: Any): ...
    def get_context(self, task_state: Any, **kwargs: Any): ...
    def get_recipient_users(self, task_state: Any, **kwargs: Any): ...

class GroupApprovalTaskStateSubmissionEmailNotifier(BaseGroupApprovalTaskStateEmailNotifier):
    notification: str = ...
