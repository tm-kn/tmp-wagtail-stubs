from django import forms
from typing import Any, Optional
from wagtail.admin.localization import get_available_admin_languages as get_available_admin_languages, get_available_admin_time_zones as get_available_admin_time_zones
from wagtail.admin.widgets import AdminPageChooser as AdminPageChooser
from wagtail.core import hooks as hooks
from wagtail.core.models import GroupPagePermission as GroupPagePermission, PAGE_PERMISSION_TYPES as PAGE_PERMISSION_TYPES, PAGE_PERMISSION_TYPE_CHOICES as PAGE_PERMISSION_TYPE_CHOICES, Page as Page, UserPagePermissionsProxy as UserPagePermissionsProxy
from wagtail.users.models import UserProfile as UserProfile

User: Any
standard_fields: Any
custom_fields: Any

class UsernameForm(forms.ModelForm):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def username_field(self): ...
    def separate_username_field(self): ...

class UserForm(UsernameForm):
    required_css_class: str = ...
    @property
    def password_required(self): ...
    @property
    def password_enabled(self): ...
    error_messages: Any = ...
    email: Any = ...
    first_name: Any = ...
    last_name: Any = ...
    password1: Any = ...
    password2: Any = ...
    is_superuser: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def clean_password2(self): ...
    def validate_password(self) -> None: ...
    def save(self, commit: bool = ...): ...

class UserCreationForm(UserForm):
    class Meta:
        model: Any = ...
        fields: Any = ...
        widgets: Any = ...

class UserEditForm(UserForm):
    password_required: bool = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    class Meta:
        model: Any = ...
        fields: Any = ...
        widgets: Any = ...

class GroupForm(forms.ModelForm):
    registered_permissions: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    required_css_class: str = ...
    error_messages: Any = ...
    is_superuser: Any = ...
    class Meta:
        model: Any = ...
        fields: Any = ...
        widgets: Any = ...
    def clean_name(self): ...
    def save(self): ...

class PagePermissionsForm(forms.Form):
    page: Any = ...
    permission_types: Any = ...

class BaseGroupPagePermissionFormSet(forms.BaseFormSet):
    permission_types: Any = ...
    instance: Any = ...
    def __init__(self, data: Optional[Any] = ..., files: Optional[Any] = ..., instance: Optional[Any] = ..., prefix: str = ...): ...
    @property
    def empty_form(self): ...
    def clean(self) -> None: ...
    def save(self) -> None: ...
    def as_admin_panel(self): ...

GroupPagePermissionFormSet: Any

class NotificationPreferencesForm(forms.ModelForm):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    class Meta:
        model: Any = ...
        fields: Any = ...

class PreferredLanguageForm(forms.ModelForm):
    preferred_language: Any = ...
    class Meta:
        model: Any = ...
        fields: Any = ...

class EmailForm(forms.ModelForm):
    email: Any = ...
    class Meta:
        model: Any = ...
        fields: Any = ...

class NameForm(forms.ModelForm):
    first_name: Any = ...
    last_name: Any = ...
    class Meta:
        model: Any = ...
        fields: Any = ...

class CurrentTimeZoneForm(forms.ModelForm):
    current_time_zone: Any = ...
    class Meta:
        model: Any = ...
        fields: Any = ...

class AvatarPreferencesForm(forms.ModelForm):
    avatar: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def save(self, commit: bool = ...) -> None: ...
    class Meta:
        model: Any = ...
        fields: Any = ...
