from django.db import models
from typing import Any, Optional
from wagtail.admin.models import get_object_usage as get_object_usage
from wagtail.core import hooks as hooks
from wagtail.core.models import CollectionMember as CollectionMember
from wagtail.core.utils import string_to_ascii as string_to_ascii
from wagtail.images.exceptions import InvalidFilterSpecError as InvalidFilterSpecError
from wagtail.images.rect import Rect as Rect
from wagtail.search import index as index
from wagtail.search.queryset import SearchableQuerySetMixin as SearchableQuerySetMixin

class SourceImageIOError(IOError): ...
class ImageQuerySet(SearchableQuerySetMixin, models.QuerySet): ...

def get_upload_to(instance: Any, filename: Any): ...
def get_rendition_upload_to(instance: Any, filename: Any): ...

class AbstractImage(CollectionMember, index.Indexed, models.Model):
    title: Any = ...
    file: Any = ...
    width: Any = ...
    height: Any = ...
    created_at: Any = ...
    uploaded_by_user: Any = ...
    tags: Any = ...
    focal_point_x: Any = ...
    focal_point_y: Any = ...
    focal_point_width: Any = ...
    focal_point_height: Any = ...
    file_size: Any = ...
    file_hash: Any = ...
    objects: Any = ...
    def is_stored_locally(self): ...
    def get_file_size(self): ...
    def get_file_hash(self): ...
    def get_upload_to(self, filename: Any): ...
    def get_usage(self): ...
    @property
    def usage_url(self): ...
    search_fields: Any = ...
    def open_file(self) -> None: ...
    def get_willow_image(self) -> None: ...
    def get_rect(self): ...
    def get_focal_point(self): ...
    def has_focal_point(self): ...
    def set_focal_point(self, rect: Any) -> None: ...
    def get_suggested_focal_point(self): ...
    @classmethod
    def get_rendition_model(cls): ...
    def get_rendition(self, filter: Any): ...
    def is_portrait(self): ...
    def is_landscape(self): ...
    @property
    def filename(self): ...
    @property
    def default_alt_text(self): ...
    def is_editable_by_user(self, user: Any): ...
    class Meta:
        abstract: bool = ...

class Image(AbstractImage):
    admin_form_fields: Any = ...
    class Meta:
        verbose_name: Any = ...
        verbose_name_plural: Any = ...

class Filter:
    spec: Any = ...
    def __init__(self, spec: Optional[Any] = ...) -> None: ...
    def operations(self): ...
    def run(self, image: Any, output: Any): ...
    def get_cache_key(self, image: Any): ...

class AbstractRendition(models.Model):
    filter_spec: Any = ...
    file: Any = ...
    width: Any = ...
    height: Any = ...
    focal_point_key: Any = ...
    @property
    def url(self): ...
    @property
    def alt(self): ...
    @property
    def attrs(self): ...
    @property
    def attrs_dict(self): ...
    def img_tag(self, extra_attributes: Any = ...): ...
    def __html__(self): ...
    def get_upload_to(self, filename: Any): ...
    @classmethod
    def check(cls, **kwargs: Any): ...
    @staticmethod
    def construct_cache_key(image_id: Any, filter_cache_key: Any, filter_spec: Any): ...
    def purge_from_cache(self) -> None: ...
    class Meta:
        abstract: bool = ...

class Rendition(AbstractRendition):
    image: Any = ...
    class Meta:
        unique_together: Any = ...

class UploadedImage(models.Model):
    file: Any = ...
    uploaded_by_user: Any = ...
