from django.db.models.query import BaseIterable
from treebeard.mp_tree import MP_NodeQuerySet
from typing import Any
from wagtail.search.queryset import SearchableQuerySetMixin as SearchableQuerySetMixin

class TreeQuerySet(MP_NodeQuerySet):
    def delete(self) -> None: ...
    def descendant_of_q(self, other: Any, inclusive: bool = ...): ...
    def descendant_of(self, other: Any, inclusive: bool = ...): ...
    def not_descendant_of(self, other: Any, inclusive: bool = ...): ...
    def child_of_q(self, other: Any): ...
    def child_of(self, other: Any): ...
    def not_child_of(self, other: Any): ...
    def ancestor_of_q(self, other: Any, inclusive: bool = ...): ...
    def ancestor_of(self, other: Any, inclusive: bool = ...): ...
    def not_ancestor_of(self, other: Any, inclusive: bool = ...): ...
    def parent_of_q(self, other: Any): ...
    def parent_of(self, other: Any): ...
    def not_parent_of(self, other: Any): ...
    def sibling_of_q(self, other: Any, inclusive: bool = ...): ...
    def sibling_of(self, other: Any, inclusive: bool = ...): ...
    def not_sibling_of(self, other: Any, inclusive: bool = ...): ...

class PageQuerySet(SearchableQuerySetMixin, TreeQuerySet):
    def live_q(self): ...
    def live(self): ...
    def not_live(self): ...
    def in_menu_q(self): ...
    def in_menu(self): ...
    def not_in_menu(self): ...
    def page_q(self, other: Any): ...
    def page(self, other: Any): ...
    def not_page(self, other: Any): ...
    def type_q(self, klass: Any): ...
    def type(self, model: Any): ...
    def not_type(self, model: Any): ...
    def exact_type_q(self, klass: Any): ...
    def exact_type(self, model: Any): ...
    def not_exact_type(self, model: Any): ...
    def public_q(self): ...
    def public(self): ...
    def not_public(self): ...
    def first_common_ancestor(self, include_self: bool = ..., strict: bool = ...): ...
    def unpublish(self) -> None: ...
    def specific(self, defer: bool = ...): ...
    def in_site(self, site: Any): ...
    def translation_of_q(self, page: Any, inclusive: Any): ...
    def translation_of(self, page: Any, inclusive: bool = ...): ...
    def not_translation_of(self, page: Any, inclusive: bool = ...): ...

def specific_iterator(qs: Any, defer: bool = ...) -> None: ...

class SpecificIterable(BaseIterable):
    def __iter__(self) -> Any: ...

class DeferredSpecificIterable(BaseIterable):
    def __iter__(self) -> Any: ...
