from .base import Block, BoundBlock, DeclarativeSubBlocksMetaclass
from collections.abc import Sequence
from django.core.exceptions import ValidationError
from typing import Any, Optional

class StreamBlockValidationError(ValidationError):
    def __init__(self, block_errors: Optional[Any] = ..., non_block_errors: Optional[Any] = ...) -> None: ...

class BaseStreamBlock(Block):
    child_blocks: Any = ...
    dependencies: Any = ...
    def __init__(self, local_blocks: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def get_default(self): ...
    def sorted_child_blocks(self): ...
    def render_list_member(self, block_type_name: Any, value: Any, prefix: Any, index: Any, errors: Optional[Any] = ..., id: Optional[Any] = ...): ...
    def html_declarations(self): ...
    @property
    def media(self): ...
    def js_initializer(self): ...
    def render_form(self, value: Any, prefix: str = ..., errors: Optional[Any] = ...): ...
    def value_from_datadict(self, data: Any, files: Any, prefix: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, prefix: Any): ...
    @property
    def required(self): ...
    def clean(self, value: Any): ...
    def to_python(self, value: Any): ...
    def bulk_to_python(self, values: Any): ...
    def get_prep_value(self, value: Any): ...
    def get_api_representation(self, value: Any, context: Optional[Any] = ...): ...
    def render_basic(self, value: Any, context: Optional[Any] = ...): ...
    def get_searchable_content(self, value: Any): ...
    def deconstruct(self): ...
    def check(self, **kwargs: Any): ...
    class Meta:
        icon: str = ...
        default: Any = ...
        required: bool = ...
        min_num: Any = ...
        max_num: Any = ...
        block_counts: Any = ...

class StreamBlock(BaseStreamBlock, metaclass=DeclarativeSubBlocksMetaclass): ...

class StreamValue(Sequence):
    class StreamChild(BoundBlock):
        id: Any = ...
        def __init__(self, *args: Any, **kwargs: Any) -> None: ...
        @property
        def block_type(self): ...
    is_lazy: Any = ...
    stream_block: Any = ...
    stream_data: Any = ...
    raw_text: Any = ...
    def __init__(self, stream_block: Any, stream_data: Any, is_lazy: bool = ..., raw_text: Optional[Any] = ...) -> None: ...
    def __getitem__(self, i: Any): ...
    def get_prep_value(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __len__(self): ...
    def render_as_block(self, context: Optional[Any] = ...): ...
    def __html__(self): ...
