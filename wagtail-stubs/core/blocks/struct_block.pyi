import collections
from .base import Block, DeclarativeSubBlocksMetaclass
from typing import Any, Optional

class StructValue(collections.OrderedDict):
    block: Any = ...
    def __init__(self, block: Any, *args: Any) -> None: ...
    def __html__(self): ...
    def render_as_block(self, context: Optional[Any] = ...): ...
    def bound_blocks(self): ...

class BaseStructBlock(Block):
    child_blocks: Any = ...
    child_js_initializers: Any = ...
    dependencies: Any = ...
    def __init__(self, local_blocks: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def get_default(self): ...
    def js_initializer(self): ...
    @property
    def media(self): ...
    def get_form_context(self, value: Any, prefix: str = ..., errors: Optional[Any] = ...): ...
    def render_form(self, value: Any, prefix: str = ..., errors: Optional[Any] = ...): ...
    def value_from_datadict(self, data: Any, files: Any, prefix: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, prefix: Any): ...
    def clean(self, value: Any): ...
    def to_python(self, value: Any): ...
    def bulk_to_python(self, values: Any): ...
    def get_prep_value(self, value: Any): ...
    def get_api_representation(self, value: Any, context: Optional[Any] = ...): ...
    def get_searchable_content(self, value: Any): ...
    def deconstruct(self): ...
    def check(self, **kwargs: Any): ...
    def render_basic(self, value: Any, context: Optional[Any] = ...): ...
    class Meta:
        default: Any = ...
        form_classname: str = ...
        form_template: str = ...
        value_class: Any = ...
        icon: str = ...

class StructBlock(BaseStructBlock, metaclass=DeclarativeSubBlocksMetaclass): ...
