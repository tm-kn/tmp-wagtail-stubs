from .base import Block as Block
from typing import Any, Optional
from wagtail.core.rich_text import RichText as RichText, get_text_for_indexing as get_text_for_indexing
from wagtail.core.utils import resolve_model_string as resolve_model_string

class FieldBlock(Block):
    def id_for_label(self, prefix: Any): ...
    def render_form(self, value: Any, prefix: str = ..., errors: Optional[Any] = ...): ...
    def value_from_form(self, value: Any): ...
    def value_for_form(self, value: Any): ...
    def value_from_datadict(self, data: Any, files: Any, prefix: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, prefix: Any): ...
    def clean(self, value: Any): ...
    @property
    def media(self): ...
    @property
    def required(self): ...
    class Meta:
        icon: str = ...
        default: Any = ...

class CharBlock(FieldBlock):
    field: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., max_length: Optional[Any] = ..., min_length: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    def get_searchable_content(self, value: Any): ...

class TextBlock(FieldBlock):
    field_options: Any = ...
    rows: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., rows: int = ..., max_length: Optional[Any] = ..., min_length: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    def field(self): ...
    def get_searchable_content(self, value: Any): ...
    class Meta:
        icon: str = ...

class BlockQuoteBlock(TextBlock):
    def render_basic(self, value: Any, context: Optional[Any] = ...): ...
    class Meta:
        icon: str = ...

class FloatBlock(FieldBlock):
    field: Any = ...
    def __init__(self, required: bool = ..., max_value: Optional[Any] = ..., min_value: Optional[Any] = ..., validators: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    class Meta:
        icon: str = ...

class DecimalBlock(FieldBlock):
    field: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., max_value: Optional[Any] = ..., min_value: Optional[Any] = ..., max_digits: Optional[Any] = ..., decimal_places: Optional[Any] = ..., validators: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    class Meta:
        icon: str = ...

class RegexBlock(FieldBlock):
    field: Any = ...
    def __init__(self, regex: Any, required: bool = ..., help_text: Optional[Any] = ..., max_length: Optional[Any] = ..., min_length: Optional[Any] = ..., error_messages: Optional[Any] = ..., validators: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    class Meta:
        icon: str = ...

class URLBlock(FieldBlock):
    field: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., max_length: Optional[Any] = ..., min_length: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    class Meta:
        icon: str = ...

class BooleanBlock(FieldBlock):
    field: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., **kwargs: Any) -> None: ...
    class Meta:
        icon: str = ...

class DateBlock(FieldBlock):
    field_options: Any = ...
    format: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., format: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    def field(self): ...
    def to_python(self, value: Any): ...
    class Meta:
        icon: str = ...

class TimeBlock(FieldBlock):
    field_options: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    def field(self): ...
    def to_python(self, value: Any): ...
    class Meta:
        icon: str = ...

class DateTimeBlock(FieldBlock):
    field_options: Any = ...
    format: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., format: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    def field(self): ...
    def to_python(self, value: Any): ...
    class Meta:
        icon: str = ...

class EmailBlock(FieldBlock):
    field: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    class Meta:
        icon: str = ...

class IntegerBlock(FieldBlock):
    field: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., min_value: Optional[Any] = ..., max_value: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    class Meta:
        icon: str = ...

class BaseChoiceBlock(FieldBlock):
    choices: Any = ...
    field: Any = ...
    def __init__(self, choices: Optional[Any] = ..., default: Optional[Any] = ..., required: bool = ..., help_text: Optional[Any] = ..., widget: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    class Meta:
        icon: str = ...

class ChoiceBlock(BaseChoiceBlock):
    def get_field(self, **kwargs: Any): ...
    def deconstruct(self): ...
    def get_searchable_content(self, value: Any): ...

class MultipleChoiceBlock(BaseChoiceBlock):
    def get_field(self, **kwargs: Any): ...
    def deconstruct(self): ...
    def get_searchable_content(self, value: Any): ...

class RichTextBlock(FieldBlock):
    field_options: Any = ...
    editor: Any = ...
    features: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., editor: str = ..., features: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    def get_default(self): ...
    def to_python(self, value: Any): ...
    def get_prep_value(self, value: Any): ...
    def field(self): ...
    def value_for_form(self, value: Any): ...
    def value_from_form(self, value: Any): ...
    def get_searchable_content(self, value: Any): ...
    class Meta:
        icon: str = ...

class RawHTMLBlock(FieldBlock):
    field: Any = ...
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., max_length: Optional[Any] = ..., min_length: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    def get_default(self): ...
    def to_python(self, value: Any): ...
    def get_prep_value(self, value: Any): ...
    def value_for_form(self, value: Any): ...
    def value_from_form(self, value: Any): ...
    class Meta:
        icon: str = ...

class ChooserBlock(FieldBlock):
    def __init__(self, required: bool = ..., help_text: Optional[Any] = ..., validators: Any = ..., **kwargs: Any) -> None: ...
    def field(self): ...
    def to_python(self, value: Any): ...
    def bulk_to_python(self, values: Any): ...
    def get_prep_value(self, value: Any): ...
    def value_from_form(self, value: Any): ...
    def clean(self, value: Any): ...
    class Meta:
        icon: str = ...

class PageChooserBlock(ChooserBlock):
    page_type: Any = ...
    can_choose_root: Any = ...
    def __init__(self, page_type: Optional[Any] = ..., can_choose_root: bool = ..., target_model: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def target_model(self): ...
    def target_models(self): ...
    def widget(self): ...
    def render_basic(self, value: Any, context: Optional[Any] = ...): ...
    def deconstruct(self): ...
    class Meta:
        icon: str = ...

block_classes: Any
DECONSTRUCT_ALIASES: Any
