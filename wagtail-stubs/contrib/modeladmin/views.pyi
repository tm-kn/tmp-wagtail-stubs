from .forms import ParentChooserForm as ParentChooserForm
from django.views.generic import TemplateView
from django.views.generic.edit import FormView
from typing import Any, Optional
from wagtail.admin import messages as messages
from wagtail.admin.views.mixins import SpreadsheetExportMixin as SpreadsheetExportMixin

class WMABaseView(TemplateView):
    model_admin: Any = ...
    meta_title: str = ...
    page_title: str = ...
    page_subtitle: str = ...
    model: Any = ...
    opts: Any = ...
    app_label: Any = ...
    model_name: Any = ...
    verbose_name: Any = ...
    verbose_name_plural: Any = ...
    pk_attname: Any = ...
    is_pagemodel: Any = ...
    permission_helper: Any = ...
    url_helper: Any = ...
    def __init__(self, model_admin: Any) -> None: ...
    def check_action_permitted(self, user: Any): ...
    button_helper: Any = ...
    def dispatch(self, request: Any, *args: Any, **kwargs: Any): ...
    def menu_icon(self): ...
    def header_icon(self): ...
    def get_page_title(self): ...
    def get_meta_title(self): ...
    def index_url(self): ...
    def create_url(self): ...
    def get_base_queryset(self, request: Optional[Any] = ...): ...
    def get_context_data(self, **kwargs: Any): ...

class ModelFormView(WMABaseView, FormView):
    edit_handler: Any = ...
    def setup(self, request: Any, *args: Any, **kwargs: Any) -> None: ...
    def get_form(self): ...
    def get_edit_handler(self): ...
    def get_form_class(self): ...
    def get_success_url(self): ...
    def get_instance(self): ...
    def get_form_kwargs(self): ...
    @property
    def media(self): ...
    def get_context_data(self, form: Optional[Any] = ..., **kwargs: Any): ...
    def get_prepopulated_fields(self, form: Any): ...
    def get_success_message(self, instance: Any): ...
    def get_success_message_buttons(self, instance: Any): ...
    def get_error_message(self): ...
    def form_valid(self, form: Any): ...
    def form_invalid(self, form: Any): ...

class InstanceSpecificView(WMABaseView):
    instance_pk: Any = ...
    pk_quoted: Any = ...
    instance: Any = ...
    def __init__(self, model_admin: Any, instance_pk: Any) -> None: ...
    def get_page_subtitle(self): ...
    def edit_url(self): ...
    def delete_url(self): ...
    def get_context_data(self, **kwargs: Any): ...

class IndexView(SpreadsheetExportMixin, WMABaseView):
    ORDER_VAR: str = ...
    ORDER_TYPE_VAR: str = ...
    PAGE_VAR: str = ...
    SEARCH_VAR: str = ...
    ERROR_FLAG: str = ...
    EXPORT_VAR: str = ...
    IGNORED_PARAMS: Any = ...
    sortable_by: Any = ...
    list_export: Any = ...
    list_display: Any = ...
    list_filter: Any = ...
    search_fields: Any = ...
    items_per_page: Any = ...
    select_related: Any = ...
    search_handler: Any = ...
    export: Any = ...
    page_num: Any = ...
    params: Any = ...
    query: Any = ...
    queryset: Any = ...
    def dispatch(self, request: Any, *args: Any, **kwargs: Any): ...
    def get_filename(self): ...
    def get_heading(self, queryset: Any, field: Any): ...
    def to_row_dict(self, item: Any): ...
    @property
    def media(self): ...
    def get_buttons_for_obj(self, obj: Any): ...
    def get_search_results(self, request: Any, queryset: Any, search_term: Any): ...
    def get_filters_params(self, params: Optional[Any] = ...): ...
    def get_filters(self, request: Any): ...
    def get_query_string(self, new_params: Optional[Any] = ..., remove: Optional[Any] = ...): ...
    def get_default_ordering(self, request: Any): ...
    def get_ordering_field(self, field_name: Any): ...
    def get_ordering(self, request: Any, queryset: Any): ...
    def get_ordering_field_columns(self): ...
    def get_queryset(self, request: Optional[Any] = ...): ...
    def apply_select_related(self, qs: Any): ...
    def has_related_field_in_list_display(self): ...
    def get_context_data(self, **kwargs: Any): ...
    def get_template_names(self): ...

class CreateView(ModelFormView):
    page_title: Any = ...
    def check_action_permitted(self, user: Any): ...
    def dispatch(self, request: Any, *args: Any, **kwargs: Any): ...
    def get_meta_title(self): ...
    def get_page_subtitle(self): ...
    def get_template_names(self): ...

class EditView(ModelFormView, InstanceSpecificView):
    page_title: Any = ...
    def check_action_permitted(self, user: Any): ...
    def dispatch(self, request: Any, *args: Any, **kwargs: Any): ...
    def get_meta_title(self): ...
    def get_success_message(self, instance: Any): ...
    def get_context_data(self, **kwargs: Any): ...
    def get_error_message(self): ...
    def get_template_names(self): ...

class ChooseParentView(WMABaseView):
    def dispatch(self, request: Any, *args: Any, **kwargs: Any): ...
    def get_page_title(self): ...
    def get_form(self, request: Any): ...
    def get(self, request: Any, *args: Any, **kwargs: Any): ...
    def post(self, request: Any, *args: Any, **kargs: Any): ...
    def form_valid(self, form: Any): ...
    def form_invalid(self, form: Any): ...
    def get_template_names(self): ...

class DeleteView(InstanceSpecificView):
    page_title: Any = ...
    def check_action_permitted(self, user: Any): ...
    def dispatch(self, request: Any, *args: Any, **kwargs: Any): ...
    def get_meta_title(self): ...
    def confirmation_message(self): ...
    def delete_instance(self) -> None: ...
    def post(self, request: Any, *args: Any, **kwargs: Any): ...
    def get_template_names(self): ...

class InspectView(InstanceSpecificView):
    page_title: Any = ...
    def check_action_permitted(self, user: Any): ...
    @property
    def media(self): ...
    def get_meta_title(self): ...
    def get_field_label(self, field_name: Any, field: Optional[Any] = ...): ...
    def get_field_display_value(self, field_name: Any, field: Optional[Any] = ...): ...
    def get_image_field_display(self, field_name: Any, field: Any): ...
    def get_document_field_display(self, field_name: Any, field: Any): ...
    def get_dict_for_field(self, field_name: Any): ...
    def get_fields_dict(self): ...
    def get_context_data(self, **kwargs: Any): ...
    def get_template_names(self): ...
