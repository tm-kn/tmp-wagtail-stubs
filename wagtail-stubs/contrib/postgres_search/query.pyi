from django.contrib.postgres.search import SearchQueryCombinable
from django.db.models.expressions import Expression, Value
from typing import Any, Optional

class LexemeCombinable(Expression):
    BITAND: str = ...
    BITOR: str = ...
    def bitand(self, other: Any): ...
    def bitor(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __and__(self, other: Any): ...

class Lexeme(LexemeCombinable, Value):
    prefix: Any = ...
    invert: Any = ...
    weight: Any = ...
    def __init__(self, value: Any, output_field: Optional[Any] = ..., *, invert: bool = ..., prefix: bool = ..., weight: Optional[Any] = ...) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...

class CombinedLexeme(LexemeCombinable):
    connector: Any = ...
    lhs: Any = ...
    rhs: Any = ...
    def __init__(self, lhs: Any, connector: Any, rhs: Any, output_field: Optional[Any] = ...) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...

class RawSearchQuery(SearchQueryCombinable, Expression):
    config: Any = ...
    invert: Any = ...
    expressions: Any = ...
    def __init__(self, expressions: Any, output_field: Optional[Any] = ..., *, config: Optional[Any] = ..., invert: bool = ...) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def __invert__(self): ...
