from typing import Any, Callable, ClassVar, Dict, Optional, Iterable
from django.http import HttpRequest, HttpResponse
from django.urls import URLResolver
from wagtail.core.models import Page
from wagtail.core.url_routing import RouteResult

_VIEW = TypeVar("_VIEW", bound=Callable[..., HttpResponseBase])

def route(pattern: Any, name: Optional[Any] = ...): ...

class RoutablePageMixin:
    def index_route(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...
    @classmethod
    def get_subpage_urls(cls) -> Tuple[str, ...]: ...
    @classmethod
    def get_resolver(cls) -> URLResolver: ...
    def reverse_subpage(self, name: str, args: Optional[Any] = ..., kwargs: Optional[Any] = ...) -> str: ...
    def resolve_subpage(self, path: str) -> Tuple[_VIEW, Any, Any]: ...
    def route(self, request: HttpRequest, path_components: List[str]) -> RouteResult: ...
    def serve(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...
    def render(self, request: HttpRequest, *args: Any, template: Optional[str] = ..., context_overrides: Optional[Dict] = ..., **kwargs: Any) -> HttpResponse: ...
    def serve_preview(self, request: HttpRequest, mode_name: str) -> HttpResponse: ...

class RoutablePage(RoutablePageMixin, Page): ...
